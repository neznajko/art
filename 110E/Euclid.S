################################################################
################################################################
################################################################
################################################################
.global _start
################################################################
################################################################
_start:
################################################################
# Euclid.S - RISC-V assembly file for The Euclid Algorithm
################################################################
# For running this program I had to install the GNU RISC-V 
# toolchain, which was nice experience:) and qemu-user package
# and then compile link run and debug with these commands:
# > riscv64-unknown-elf-as -g -o Euclid.o Euclid.S
# > riscv64-unknown-elf-ld Euclid.o
# > qemu-riscv64 -q 1234 a.out
# Here start gdb in another terminal ###########################
# > riscv64-unknown-elf-gdb
# (gdb) file a.out
# (gdb) target remote localhost:1234
# (gdb) ..
################################################################
################################################################
        li x1, 2166 # m <- 2166
################################################################
        li x2, 6099 # n <- 6099
################################################################
loopin:
################################################################
################################################################
        rem x3, x1, x2 # r(x3) <- m(x1) % n(x2)
################################################################
        beq x3, x0, loopout # branch out if r is nil
################################################################
        mv x1, x2 # m <- n
################################################################
        mv x2, x3 # n <- r
################################################################
        j loopin
################################################################
loopout: # x2 holds the key, 0x39 ( 57 )
################################################################
################################################################
################################################################
        li a0, 0
################################################################
        li a7, 93
################################################################
        ecall
################################################################
################################################################
################################################################
################################################################
################################################################
// prev:github.com/neznajko/gfg/blob/main/java/equalPartitn.java
// logbook:      The harmony between contrasts creates the whole, 
// everything comes from here, but there are two aspects of this
//      stuff, fyorst is if there is no harmony, the other is if
// there are no contrasts, for example is the compromise good or
// bad? As a harmony between contrasts it's good but it also can
// be bad because making too much compromises, can depersonalize
//                              oneself, vanishing the contrasts.
//                                                           Fin
