########################### Mixed Radix Tuple Generation
########################################################
# M1.[ Initialize.] Set a[j] <- 0 for 0 <= j <= n, and
# set m[0] <- 2
a = [ 0, 0, 0, 0 ]
m = [ 2, 4, 2, 8 ]
n = len( a ) - 1
while True:
# M2.[ Visit. ] Visit the n-tuple (a[1],...,a[n]). (The
# program that wants to examine all n-tuples now does
# its thing.)
    print( a[ 1: ])
# M3.[ Prepare to add one. ] Set j <- n.
    j = n
# M4.[ Carry if necessary. ] If a[j] = m[j] - 1,
# set a[j] <- 0, j <- j - 1, and repeat this step.
    while a[ j ] == m[ j ] - 1:
        a[ j ] = 0
        j -= 1
# M5.[ Increase, unless done. ] If j = 0, terminate the
# algorithm. Otherwise set a[j] <- a[j] + 1 and go back
# to step M2.
    if not j: break
    a[ j ] += 1
########################################################
# [0, 0, 0]
# [0, 0, 1]
# [0, 0, 2]
# [0, 0, 3]
# [0, 0, 4]
# [0, 0, 5]
# [0, 0, 6]
# [0, 0, 7]
# [0, 1, 0]
# [0, 1, 1]
# [0, 1, 2]
# [0, 1, 3]
# [0, 1, 4]
# [0, 1, 5]
# [0, 1, 6]
# [0, 1, 7]
# [1, 0, 0]
# [1, 0, 1]
# [1, 0, 2]
# [1, 0, 3]
# [1, 0, 4]
# [1, 0, 5]
# [1, 0, 6]
# [1, 0, 7]
# [1, 1, 0]
# [1, 1, 1]
# [1, 1, 2]
# [1, 1, 3]
# [1, 1, 4]
# [1, 1, 5]
# [1, 1, 6]
# [1, 1, 7]
# [2, 0, 0]
# [2, 0, 1]
# [2, 0, 2]
# [2, 0, 3]
# [2, 0, 4]
# [2, 0, 5]
# [2, 0, 6]
# [2, 0, 7]
# [2, 1, 0]
# [2, 1, 1]
# [2, 1, 2]
# [2, 1, 3]
# [2, 1, 4]
# [2, 1, 5]
# [2, 1, 6]
# [2, 1, 7]
# [3, 0, 0]
# [3, 0, 1]
# [3, 0, 2]
# [3, 0, 3]
# [3, 0, 4]
# [3, 0, 5]
# [3, 0, 6]
# [3, 0, 7]
# [3, 1, 0]
# [3, 1, 1]
# [3, 1, 2]
# [3, 1, 3]
# [3, 1, 4]
# [3, 1, 5]
# [3, 1, 6]
# [3, 1, 7]
