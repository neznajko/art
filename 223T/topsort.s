////////////////////////////////////////////////////////////////	
        .att_syntax noprefix
////////////////////////////////////////////////////////////////
        .globl main
////////
        .data
ifile:  .string "./paper.dev"
	.equ BUFRLEN, 256
	.lcomm bufr, BUFRLEN
	.equ WSIZE, 5 /* word size */
fomt:	.string "%lld "
////////
        .text
main:   nop/*                     |      -                    ^
       ;========,,,,,,,,  &     ````````--------        oooooooo
       ;== == ==,,,,,,,,^^^^^^^^`````o``\\\\\\\\________````````
       ;========,,,,--------^^^^````````---  ---________````````
;;;;;;;;--------,,,,--------////````````---==---........`````**/
	mov	$2, rax/*---sys_open````--------########=====**/
	lea	ifile(rip), rdi	/* fst arg( f i l e p a t h )**/
	mov	$0, rsi/* read only ```'--------````````= = =**/
	syscall	/*,,--------;;;;;;;;````////////```-````=====**/
	mov	rax, r15 /*;;;;;;;;; save file descriptor = =**/
	mov	$0, rax/****sys_read....--------```-````=====**/
	mov	r15, rdi/***`file`descriptor----```-````= = =**/
	lea	bufr(rip), rsi/*````''''-- -- --```-````=====**/
	mov	$BUFRLEN, rdx/*`````''''========```-````= = =**/
	syscall	/*======\\\\   ;;       == == ==```-````=====**/
	mov	$3, rax/*\\\  ;;;;      ===s=y=s___close^^^^^**/
	mov	r15, rdi/*\\ ;;;;;;  f i l e ===descriptor   **/
	syscall /*********\\;;;;;;;;    ========________`````**/
////////////////////////////////////////////////////////////////
	// next is using atoi vhich is a glibc routine, and that
	// lib is trashing the registers except rbp, rbx, r12-15
	// so make backups there and use those registers. ======
	mov	rsi, r15/*;; mmmmmm ;;TTT= = = =||||||||`````**/
	call	next/*\\\\\          TTTT=======||||  ||`````**/
	call	next/*\\\\\  +    +  TTTT=======||      &&&&&**/
	mov	rax, r14/*\  =    No. vertices =          &&&**/
////////////////////////////////////////////////////////////////
	// Allocate r14 + 1 [  CONT ][  SOCK ] structures on the
	// stack.. That will be the top,,, data save it to r12..
	// Size of node is 2*8 = 2^4 = 1 << 4 = 16 bytes. ------
	inc	rax/****. . . . ======== _ _ _ _        -----**/
	shl	$4, rax/* . . . <<<<<<<< ^ ^ ^ ^ + + + +-----**/
	mov	rsp, rbp/* copy to rbp so it can be restored **/
	sub	rax, rsp/*. . . <<<<<<<<^ ^ ^ ^ + + + + -----**/
	mov	rsp, r12/* . . .< < < <  ^ ^ ^ ^ + + + +-----**/
	// Ok set all fields to nil	-	_	8     	*/
	mov	rbp, rax /*	x	2	1	-     	*/
1:	sub	$16, rax /*	-	_	8	_     	*/
	movq	$0, (rax) /*	,	`	-	<	*/
	movq	$0, 8(rax) /*	-	=	8	,	*/
	cmp	rax, r12 /*	,	_	/	1	*/
	jnz	1b /*	,	`	p	_	#	*/								
////////////////////////////////////////////////////////////////
	// Loop over bufr and build data structures. + - - - - +
2:	call 	next/***. . . .	``````````^ ^ ^ _____ __= = ==*/
	mov	rax, r13 /*. . .``````@@`` ^ ^ ^____ ___======*/
	call	next/*  --------||||@@  @@======___ ____======*/
	cmp	rax, r13 /**/
	jz	3f /**/
	jmp	insert_coin/*...,,@@ ==== @@----== =====//////*/
3:	nop 	/* This is how stack memory at r12 looks like:*/
	// 0x7fffffffe058: 0x0000000000000000 0x0000000000000000
	// 0x7fffffffe068: 0x0000000000000000 0x00007fffffffdfe8
	// 0x7fffffffe078: 0x0000000000000001 0x00007fffffffdfb8
	// 0x7fffffffe088: 0x0000000000000001 0x00007fffffffe038
	// 0x7fffffffe098: 0x0000000000000001 0x00007fffffffdff8
	// 0x7fffffffe0a8: 0x0000000000000002 0x00007fffffffe018
	// 0x7fffffffe0b8: 0x0000000000000002 0x0000000000000000
	// 0x7fffffffe0c8: 0x0000000000000001 0x00007fffffffdfd8
	// 0x7fffffffe0d8: 0x0000000000000002 0x00007fffffffe008
	// 0x7fffffffe0e8: 0x0000000000000000 0x00007fffffffdfc8
////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////
	// [ N ][ o ][ w ][   ][ w ][ e ][   ][ h ][ a ][ v ][ e ]
	// [  t  ]== o ==[     ]== f ==[  i  ]== l ==[  l  ]
	// [t  h  e]   [q  u  e  u  e], |b|y| |c|h|e|c|k|i|n|g|
	// |i|f| |C|O|U|N|T| |i|s| |n|i|l|.
	// r12 - top          | r13 - queue front pointer
	// r14 - No. vertices | r15 - queue  rear pointer
	mov	r12, r15 /* usE as poiNters reAl aDdreSses    */
	shl	$1, r14 /* , , , , m l t p l y   b y   2     **/
	lea	(r12,r14,8), r14 /* b a c k y a r d - ` , - = */
1:	cmpq	$0, (r14) /* chck vhether it"s zeró _ c ó n t */
	jnz	4f /* en öu peè > > > > > > > > > > > > > > > */
	mov	r14, (r15) /* posh to the queue ` . . ` . _ . */
	mov	r14, r15 /* update queue pøsh pointer _ * , = */
4:	sub	$16, r14 /* clck prev . . . . . . . . . . . . */
	cmp	r14, r12 /* ` , ` - + , _ _ ` < > ( - , , - < */
	jnz	1b /*	-	9	,	g	-      */
////////   /////  /  /// /////// /////// /////// /////// ////// 
////////at /////th/is///p///////o///////i///////n///////t////// 
////////we /////ca/n ///s///////t///////a///////r///////t////// 
//      pop     pi ng   :       )               L       e      t
//       th     e  fu   n       b       e       g       i      n
	nop	/*    *    *    * *      *  **       *   * * **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
	mov	(r12), r13 /* inƏtźalize ĪroĐƎ pointeŵ   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
        lea     fomt(rip), rbx /* śut forቕat¦őn rbx  ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
1:	cmp	$0, r13 /* ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
	jz	done /*    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
        	/*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
        mov     r13, rsi /*¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
        sub     r12, rsi /*¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
        shr     $4, rsi /* ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
	mov	rbx, rdi /*¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
	and	$-16, %rsp /*   ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
        call    printf /*  ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/ 
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
	        //    T    h    e ¦      f  ro       n   t   **/ s
		//    i    s    ¦ p      o  pp       e   d , **/ ü
		//    l    o    o p      ¦  ov       e   r   **/ b
                //    i    t    s ¦      s  uc       c   e s **/ s
		//    s    o    r s      ,  ¦a       n   d ¦ **/ c
	        //    d    e    c r      e  me       n   t t **/ r
                //    h    e    i r      ¦  co       u   n t **/ i
                //    ,    ¦    i f      i  t¦       b   e c **/ b
                //    o    m    e s      ¦  0¦       a   d d **/ e
                //    t    o    ¦ q      u  eu       e   ¦ ¦ **/ ?
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
		//    ¦	   ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
                //    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦   ¦
        mov     8(r13), rax
6:      cmp     $0, rax
        jz      8f
        mov     (rax), rcx
        shl     $1, rcx
        lea     (r12,rcx,8), rcx
        decq    (rcx)
        cmpq    $0, (rcx)
        jnz     7f
        mov     rcx, (r15)
        mov     rcx, r15 
7:      mov     8(rax), rax
        jmp     6b
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
                /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
8:	mov     (r13), r13 /*   ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
	jmp	1b /* ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
done:	nop     /*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
	mov	rbp, rsp/* re-establish rsp for smooth exit¦ **/
        mov	$0, rax/* exit code      ¦  ¦¦       ¦   ¦ ¦ **/
        ret	/*    ¦    ¦    ¦ ¦      ¦  ¦¦       ¦   ¦ ¦ **/
////////////////////////////////////////////////////////////////
//	A	B	C	D	E	F	G	
////////////////////////////////////////////////////////////////
next:	nop     /*******--------````````________........*******/
	mov	(r15), al/******````````________........*******/
	cmp	$'\n, al/*******````````________........*******/
	jnz	1f/*****--------````````________........*******/
	inc	r15/****--------````````________........*******/
1:	add	$WSIZE, r15/****````````________........*******/
	mov	(r15), bl/******````````--------,,,,,,,,//////*/
	movb	$0, (r15)/******........````````________//////*/
	lea	-WSIZE(r15), rdi/*******________........*******/
	and	$-16, rsp/******````````________........*******/
	call	atoi/***--------````````________........*******/
	mov	bl, (r15)/**************- - - - ........* * * */
	ret	/******* _ _ _ _` ` ` ` ,,,,,,,,--------*+*+*+*/
////////////////////////////////////////////////////////////////
//	H	I	J	K	L	M	N	
////////////////////////////////////////////////////////////////
insert_coin:/***-r-1-3->__rax___````````,,,,,,,,>>>>>>>>------*/
	// Increment top[ rax ].COUNT ``,,,,,,,,////////------*/
	mov	rax, rcx/* copy to rcx for multiplying by 2 --*/
	shl	$1, rcx/* = = = ¦ ¦ ¦ ¦ ĵĵĵĵĵĵĵĵ + + + +______*/
	lea	(r12,rcx,8), rcx/* we must be at top[ rax ]-+-*/
	incq	(rcx)/* now remains to be working =-=-=-_`_`_`*/
	// Create new node, put as CONT/VRTX value rax, * * * *_
	sub	$16, rsp /* - - + + + + , , , , _ _ _ _ ` ` ` */
	mov	rax, (rsp) /* * * * , , , - - - - ` ` ` : : : */
	// Now the funny part; link that node to top[ r13 ] - */
	shl	$1, r13 /* multiply by 2, and than scale by 8 */
	lea	(r12,r13,8), r13 /* w * h * a * t * s * this? */
	mov	8(r13), rax/* c o p y   l i n k   t o   r a x */
	mov	rax, 8(rsp) /* ch|ec|k  th|is  ou|t ,`,`,`,`,`*/
	mov	rsp, 8(r13) /* 'tha'ts no't goi'ng t'o w'or'k */
	jmp	2b /* let's check' wit|h g d b -------------- */
////////////////////////////////////////////////////////////////
//	O	P	Q	R	S	T	U
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//	V	W	X	Y	Z	[	\       
////////////////////////////////////////////////////////////////
// _.___,___'___,___.____
//  | c | o | p | y |   |
// -`---,---'---\---,---\
// -+---+---+---+---+---+
