     ( a c f g ) ( b c d ) ( a e d ) ( f a d e ) ( b g f a e )
a -> d d a a a a a a a a a a a d d d d d d e e e e e e e e a a
b -> c c c c c c c c g g g g g g g g g g g g g g g g b b b b b
c -> e e e d d d d d d c c c c c c c c c c c c c c c c c c c c
d -> g g g g g g g ) ) ) d d ) ) ) b b b b b d d d d d d d d d
e -> b b b b b b b b b b b b b b a a a ) ) ) ) b b ) ) ) ) ) e
f -> f f f f e e e e e e e e e e e e e e a a a a a a a a f f f
g -> a ) ) ) ) f f f f f f f f f f f f f f f f f f f f g g g g

If you find the logic here you are machine. This is algorithm B
from Section 1.3.3, multiplying cycle permutations in one pass.

 .. d e ) ( b g f a e ) is the permutation:
 
 a -> e   The values below x differ from the right at x-th row,
 b -> g   with the new value being equal to the last changed.
 c -> c
 d -> d  
 e -> )
 f -> a 
 g -> f

B1. [Initialize] Set T[k] <- k, for 1 <= k <= n. Prepare to
scan the input from right to left.

B2. [Next element] Get next element, if input is exhausted, terminate
the algorithm. If the character is ), set Z <- 0, and repeat B2, if
it is ( go to B4, otherwise it is Xi for some i. Move to B3.

B3. [Change T[i]] Exchange T[i] and Z, if this makes T[i] nil, set
j <- i. Go to B2.

B4. [Change T[j]] Set T[j] <- Z. Go to B2.

